#
#  Top-level configure.in file for Lorica.
#  Copyright (C) 2008 OMC Denmark ApS
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
#  MA 02111-1307 USA

AC_INIT(lorica, 0.9.0, bugs@42tools.com)

AC_COPYRIGHT(Copyright (C) 2008 OMC Denmark ApS)

AC_PREREQ(2.59)

AC_CONFIG_SRCDIR(README)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

dnl Required by autoconf 2.60
AC_SUBST(datarootdir)

AC_GNU_SOURCE
AM_CONFIG_HEADER(config.h)

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

dnl Standard checks
AC_LANG(C++)
AC_PROG_CXX
AC_REQUIRE_CPP
AC_STDC_HEADERS
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_MKDIR_P

dnl Initialize libtool
AC_PROG_LIBTOOL

dnl
dnl ACE and TAO versions
dnl
LIBACE_CURRENT=5
AC_SUBST(LIBACE_CURRENT)

LIBTAO_CURRENT=1
AC_SUBST(LIBTAO_CURRENT)

LIBACETAO_REVISION=6
AC_SUBST(LIBACETAO_REVISION)

LIBACETAO_AGE=2
AC_SUBST(LIBACETAO_AGE)

ACETAO="http://download.dre.vanderbilt.edu/previous_versions/ACE+TAO-$LIBACE_CURRENT.$LIBACETAO_REVISION.$LIBACETAO_AGE.tar.bz2"
AC_SUBST(ACETAO)

ACE_WRAPPERS_DIR="ACE_wrappers"
AC_SUBST(ACE_WRAPPERS_DIR)

dnl
dnl Lorica versions and names
dnl
LORICA_NAME=AC_PACKAGE_NAME
AC_SUBST(LORICA_NAME)

LORICA_VERSION=AC_PACKAGE_VERSION
AC_SUBST(LORICA_VERSION)

dnl
dnl Configure options
dnl
AC_ARG_ENABLE(tao-build,
	      [AS_HELP_STRING([--enable-tao-build[[[[=no/yes]]]]], [Enable download and local rebuild of ACE and TAO [default=no]])],
 	      [],
 	      enable_tao_build=no)
if test "x$enable_tao_build" = "xyes"; then
	msg_tao_build=yes
else
	msg_tao_build=no
fi

AC_ARG_ENABLE(static-bins,
	      [AS_HELP_STRING([--enable-static-bins[[[[=no/yes]]]]], [Enable statically linked binaries if possible [default=no]])],
 	      [],
 	      enable_static_bins=no)
if test "x$enable_static_bins" = "xyes"; then
	msg_static_bins=yes
else
	msg_static_bins=no
fi
AM_CONDITIONAL([LORICA_STATIC], test x$enable_static_bins = xyes)

AC_ARG_ENABLE(lorica-devel,
	      [AS_HELP_STRING([--enable-lorica-devel[[[[=no/yes]]]]], [Install development files [default=no]])],
	      [],
	      enable_lorica_devel=no)
if test "x$enable_lorica_devel" = "xyes"; then
	AC_DEFINE([LORICA_DEVEL], [1], [Define if you want to include header and IDL files when installing])
	msg_lorica_devel=yes
else
	msg_lorica_devel=no
fi
AM_CONDITIONAL(LORICA_DEVEL, test x$enable_lorica_devel = xyes)

AC_ARG_ENABLE(lorica-debug,
	      [AS_HELP_STRING([--enable-lorica-debug[[[[=no/yes]]]]], [Enable Lorica debugging [default=no]])],
	      [],
	      enable_lorica_debug=no)
if test "x$enable_lorica_debug" = "xyes"; then
	AC_DEFINE([LORICA_DEBUG], [1], [Define if you want to make a debug enabled build])
	msg_lorica_debug=yes
else
	msg_lorica_debug=no
fi
AM_CONDITIONAL([LORICA_DEBUG], test x$enable_lorica_debug = xyes)

AC_ARG_ENABLE(lorica-dist,
	      [AS_HELP_STRING([--enable-lorica-dist[[[[=no/yes]]]]], [Is this a "make dist-<PACKAGE MANAGER>" attempt? [default=no]])],
	      [],
	      ,enable_lorica_dist=no)

AC_ARG_WITH([acetao-includes],
	    [AC_HELP_STRING([--with-acetao-includes=PATH], [Location of ACE and TAO headers [default="/usr/include"]])],
            [with_acetao_includes=$withval],[with_acetao_includes="/usr/include"])

AC_ARG_WITH([acetao-libs],
	    [AC_HELP_STRING([--with-acetao-libs=PATH], [Location of ACE and TAO libraries [default="/usr/lib"]])],
            [with_acetao_libs=$withval],[with_acetao_libs=""])

dnl
dnl Which Linux distribution or UNIX platform?
dnl
AM_LORICA_CHECK_PLATFORM()

dnl
dnl Adapt to different Linux distributions and UNIX platforms
dnl
AM_LORICA_PLATFORM_ADAPT()

dnl
dnl Program availability checks
dnl
AC_CHECK_PROG(HAVE_WGET, [wget], yes, no)
if test "x$HAVE_WGET" = "xno"; then
   AC_CHECK_PROG(HAVE_CURL, [curl], yes, no)
   if test "x$HAVE_CURL" = "xno"; then
      AC_MSG_ERROR([[You need wget(1) or curl(1) program to build Lorica]])
   else
      AM_CONDITIONAL(LORICA_WGET, false)
      AM_CONDITIONAL(LORICA_CURL, true)
   fi
else
   AM_CONDITIONAL(LORICA_WGET, true)
   AM_CONDITIONAL(LORICA_CURL, false)
fi

AC_CHECK_PROG(HAVE_SED, [sed], yes, no)
if test "x$HAVE_SED" = "xno"; then
   AC_MSG_ERROR([[You need the sed(1) program to build Lorica]])
fi

AC_CHECK_PROG(HAVE_BASENAME, [basename], yes, no)
if test "x$HAVE_BASENAME" = "xno"; then
   AC_MSG_ERROR([[You need the basename(1) program to build Lorica]])
fi

AC_CHECK_PROG(HAVE_DIRNAME, [dirname], yes, no)
if test "x$HAVE_DIRNAME" = "xno"; then
   AC_MSG_ERROR([[You need the dirname(1) program to build Lorica]])
fi

AC_CHECK_PROG(HAVE_FIND, [find], yes, no)
if test "x$HAVE_FIND" = "xno"; then
   AC_MSG_ERROR([[You need the find(1) program to build Lorica]])
fi

AC_CHECK_PROG(HAVE_TAO_IFR, [tao_ifr], yes, no)
if test "x$HAVE_TAO_IFR" = "xno"; then
   AC_MSG_WARN([[You might need TAO's interface repository loader when starting Lorica]])
fi

AC_CHECK_PROG(HAVE_RPMBUILD, [rpmbuild], yes, no)
if test "x$HAVE_RPMBUILD" = "xno"; then
   AM_CONDITIONAL(LORICA_RPMBUILD, false)
   AC_MSG_WARN([[You will need the rpmbuild(8) program to build Lorica RPMs]])
else
   AM_CONDITIONAL(LORICA_RPMBUILD, true)
fi

AC_CHECK_PROG(HAVE_RPMDEV_SETUPTREE, [rpmdev-setuptree], yes, no)
if test "x$HAVE_RPMDEV_SETUPTREE" = "xno"; then
   AM_CONDITIONAL(LORICA_RPMDEV_SETUPTREE, false)
   AC_MSG_WARN([[You should have the rpmdev-setuptree program if building Lorica RPMs]])
else
   AM_CONDITIONAL(LORICA_RPMDEV_SETUPTREE, true)
fi

AC_CHECK_PROG(HAVE_RPMDEV_WIPETREE, [rpmdev-wipetree], yes, no)
if test "x$HAVE_RPMDEV_WIPETREE" = "xno"; then
   AM_CONDITIONAL(LORICA_RPMDEV_WIPETREE, false)
   AC_MSG_WARN([[You should have the rpmdev-wipetree program if building Lorica RPMs]])
else
   AM_CONDITIONAL(LORICA_RPMDEV_WIPETREE, true)
fi

AC_CHECK_PROG(HAVE_BUILD, [build], yes, no)
if test "x$HAVE_BUILD" = "xno"; then
   AC_MSG_WARN([[You should have the build program if building Lorica RPMs on SUSE]])
fi

AC_CHECK_PROG(HAVE_FAKEROOT, [fakeroot], yes, no)
if test "x$HAVE_FAKEROOT" = "xno"; then
   AC_MSG_WARN([[You will need the fakeroot(1) program to build Lorica DEBs]])
fi

AC_CHECK_PROG(HAVE_DPKG_BUILDPACKAGE, [dpkg-buildpackage], yes, no)
if test "x$HAVE_DPKG_BUILDPACKAGE" = "xno"; then
   AM_CONDITIONAL(LORICA_DPKG_BUILDPACKAGE, false)
   AC_MSG_WARN([[You will need the dpkg-buildpackage(8) program to build Lorica DEBs]])
else
   AM_CONDITIONAL(LORICA_DPKG_BUILDPACKAGE, true)
fi

dnl pkgconfig requirement
PKGCONFIG_REQUIRED=0.20
AC_SUBST(PKGCONFIG_REQUIRED)

dnl
dnl CPPFLAGS, CXXFLAGS, LIBS and stuff
dnl

dnl Lorica install directories
LORICA_idl_install_subdir="idl/lorica"
AC_SUBST(LORICA_idl_install_subdir)

ACETAO_LIB_SUBDIR="ACETAO-$LIBACE_CURRENT.$LIBACETAO_REVISION.$LIBACETAO_AGE"
AC_SUBST(ACETAO_LIB_SUBDIR)

LORICA_var_dir="/var/lorica"

dnl Lorica top-level source directory
LORICA_top_dir="`pwd`"
AC_SUBST(LORICA_top_dir)

dnl Includes
ACETAO_local_includedir="$LORICA_top_dir/$ACE_WRAPPERS_DIR"
AC_SUBST(ACETAO_local_includedir)

ACETAO_INCLUDES="-I$ACETAO_local_includedir -I$ACETAO_local_includedir/TAO -I$ACETAO_local_includedir/TAO/orbsvcs"
AC_SUBST(ACETAO_INCLUDES)

dnl DEFS
if test "x$lorica_target" = "xDarwin"; then
   LORICA_DEFS="-DACE_HAS_CUSTOM_EXPORT_MACROS=0 -DACE_HAS_EXCEPTIONS -D__ACE_INLINE__ -I$LORICA_top_dir/src"
else
   LORICA_DEFS="-D_REENTRANT -DACE_HAS_AIO_CALLS -D_GNU_SOURCE -DACE_HAS_EXCEPTIONS -D__ACE_INLINE__ -I$LORICA_top_dir/src"
fi
AC_SUBST(LORICA_DEFS)

dnl CXXFLAGS
LORICA_CXXFLAGS="-fvisibility=hidden -fvisibility-inlines-hidden -Werror -Wextra -Wundef -Wall -Wpointer-arith -O3 -pipe"
if test "x$lorica_target" = "xDarwin"; then
   LORICA_CXXFLAGS="$LORICA_CXXFLAGS -Wno-long-double -flat_namespace"
fi
if test "x$enable_lorica_dist" = "xyes"; then
	msg_lorica_dist=yes
else
	msg_lorica_dist=no
	if test "x$enable_lorica_debug" = "xyes"; then
		LORICA_CXXFLAGS="$LORICA_CXXFLAGS -Werror -Werror-implicit-function-declaration -Wundef -Wbad-function-cast -Wcast-align -Wmissing-declarations -ggdb -O1"
	else
		LORICA_CXXFLAGS="$LORICA_CXXFLAGS"
	fi
fi
if test "$lorica_target" = "OpenSUSE_10_2"; then
	LORICA_CXXFLAGS="$LORICA_CXXFLAGS $RPM_OPT_FLAGS"
fi
if test "$lorica_target" = "OpenSUSE_10_3"; then
	LORICA_CXXFLAGS="$LORICA_CXXFLAGS $RPM_OPT_FLAGS"
fi
if test "x$with_acetao_includes" != "x"; then
   	LORICA_CXXFLAGS="$LORICA_CXXFLAGS -I$with_acetao_includes"
fi
AC_SUBST(LORICA_CXXFLAGS)

dnl LDFLAGS
LDFLAGS=""
if test "x$with_acetao_libs" != "x"; then
   LDFLAGS="-L$with_acetao_libs $LDFLAGS"
fi
if test "x$lorica_target" = "xDarwin"; then
	LDFLAGS="-flat_namespace $LDFLAGS"
fi
if test "x$enable_lorica_debug" = "xyes"; then
	LDFLAGS="-rdynamic $LDFLAGS"
fi
LDFLAGS="-pthread $LDFLAGS"
AC_SUBST(LDFLAGS)

dnl
dnl Checks for ACE and TAO
dnl
AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, false)

AC_CHECK_PROG(HAVE_TAO_IDL, [tao_idl], yes, no)
if test "x$HAVE_TAO_IDL" = "xno"; then
   AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)	
   AC_MSG_WARN([[You need the TAO IDL compiler program to build Lorica - Don't worry I'll build it myself]])
fi

dnl ACE and TAO libraries
AC_CHECK_LIB([ACE], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([ACE_SSL], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_AnyTypeCode], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_CodecFactory], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_DynamicAny], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_DynamicInterface], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_EndpointPolicy], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_IFR_Client], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_IFRService], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_IORTable], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_Messaging], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_PI], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_PI_Server], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_PortableServer], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_Security], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_SSLIOP], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_TypeCodeFactory], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_Valuetype], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
AC_CHECK_LIB([TAO_Svc_Utils], [main], [], [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])

dnl ACE and TAO headers - but-ugly but needed
ACE_HEADERS="ace/ACE.h ace/Auto_Ptr.h ace/Dynamic_Service.h ace/Get_Opt.h ace/INET_Addr.h ace/Log_Msg.h ace/Min_Max.h ace/Mutex.h ace/OS_NS_errno.h ace/OS_NS_stdio.h ace/OS_NS_stdlib.h ace/OS_NS_string.h ace/OS_NS_strings.h ace/OS_NS_unistd.h ace/Service_Config.h ace/Service_Gestalt.h ace/Signal.h ace/SString.h ace/streams.h ace/Task.h ace/Thread.h ace/Time_Value.h TAO/orbsvcs/orbsvcs/IFRService/ComponentRepository_i.h TAO/orbsvcs/orbsvcs/IFRService/IFR_ComponentsS.h TAO/orbsvcs/orbsvcs/IFRService/IFR_Service_Utils.h TAO/orbsvcs/orbsvcs/IFRService/Options.h TAO/orbsvcs/orbsvcs/IOR_Multicast.h TAO/orbsvcs/orbsvcs/SecurityC.h TAO/orbsvcs/SSLIOPC.h TAO/tao/AnyTypeCode/Any_Impl.h TAO/tao/AnyTypeCode/Any_Unknown_IDL_Type.h TAO/tao/AnyTypeCode/NVList.h TAO/tao/corbafwd.h TAO/tao/CORBA_String.h TAO/tao/debug.h TAO/tao/DynamicAny/DynamicAnyC.h TAO/tao/DynamicInterface/AMH_DSI_Response_Handler.h TAO/tao/DynamicInterface/Request.h TAO/tao/DynamicInterface/Server_Request.h TAO/tao/EndpointPolicy/EndpointPolicy.h TAO/tao/EndpointPolicy/IIOPEndpointValue_i.h TAO/tao/Exception.h TAO/tao/IFR_Client/IFR_BasicC.h TAO/tao/IORTable/IORTable.h TAO/tao/Messaging/AMH_Response_Handler.h TAO/tao/MProfile.h TAO/tao/Object.h TAO/tao/OctetSeqC.h TAO/tao/ORB_Constants.h TAO/tao/ORB_Core.h TAO/tao/ORBInitializer_Registry.h TAO/tao/PI/PI.h TAO/tao/PortableServer/POAManagerFactory.h TAO/tao/PortableServer/PortableServer.h TAO/tao/PortableServer/Servant_Base.h TAO/tao/Profile.h TAO/tao/Stub.h TAO/tao/SystemException.h TAO/tao/Tagged_Components.h TAO/tao/TAO_Server_Request.h TAO/tao/Thread_Lane_Resources.h"
for file in $ACE_HEADERS
do
   AC_CHECK_FILE($with_acetao_includes/$file,
                 [],
                 [AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, true)])
done

dnl Here we should fail if a rebuild really is needed
if test "x$enable_tao_build" = "xno"; then
   AM_CONDITIONAL(LORICA_MUST_BUILD_ACETAO, false)
   AC_MSG_WARN([[Local build of ACE and TAO disabled]])
fi

dnl
dnl Environment variables to work around ':=' not being POSIX compliant
dnl
ENV_PATH=$PATH
AC_SUBST(ENV_PATH)

ENV_LD_LIBRARY_PATH=$LD_LIBRARY_PATH
AC_SUBST(ENV_LD_LIBRARY_PATH)

ENV_DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH
AC_SUBST(ENV_DYLD_LIBRARY_PATH)

dnl
dnl dh_install paths
dnl

dnl Utility macro to get dh_install .install paths
dnl LORICA_GET_DH_INSTALL_PATH(VAR-PREFIX, PATH_NAME, PATH)
AC_DEFUN([LORICA_GET_DH_INSTALL_PATH], [
	$1_$2=`echo $3 | cut -c 2-`
])

LORICA_GET_DH_INSTALL_PATH(DH_INSTALL, default_includedir, /usr/include)
AC_SUBST(DH_INSTALL_default_includedir)

LORICA_GET_DH_INSTALL_PATH(DH_INSTALL, default_datadir, /usr/share)
AC_SUBST(DH_INSTALL_default_datadir)

LORICA_GET_DH_INSTALL_PATH(DH_INSTALL, default_bindir, /usr/bin)
AC_SUBST(DH_INSTALL_default_bindir)

LORICA_GET_DH_INSTALL_PATH(DH_INSTALL, default_libdir, /usr/lib)
AC_SUBST(DH_INSTALL_default_libdir)

LORICA_GET_DH_INSTALL_PATH(DH_INSTALL, default_docdir, /usr/share/doc/$PACKAGE_NAME)
AC_SUBST(DH_INSTALL_default_docdir)


dnl
dnl Check if this is a distribution
dnl
AM_CONDITIONAL(THIS_IS_NOT_A_DISTRIBUTION, [test -f ./nodist])


dnl ******************************
dnl Makefiles
dnl ******************************

AC_OUTPUT([
Makefile
lorica.spec
deb/watch
deb/version.sed
deb/Makefile
deb/control
deb/copyright
deb/lorica-dev.install
deb/lorica.install
docs/Makefile
ebuild/Makefile
ebuild/lorica.ebuild
src/Makefile
src/OCI/Makefile
src/lorica/Makefile
src/proxy/Makefile
])

case "$lorica_target" in
	UNKNOWN)
		AC_MSG_WARN([[Unknown distribution - Please use --enable-lorica-target=<TARGET> to specify a distribution target for your build]])
		;;
	*)	
		lorica_target="`echo $LORICA_DIST_RELEASE | sed s/%20/' '/g`"
		;;
esac

echo "\

	Target Platform:                                      $lorica_target
	Making a distribution build:                          $msg_lorica_dist
	Making a debug build:                                 $msg_lorica_debug
	Making static executables:                            $msg_static_bins
	Install development header and IDL files:             $msg_lorica_devel
	Download and build ACE and TAO locally if necessary:  $msg_tao_build
"
