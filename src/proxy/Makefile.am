#  
#  Makefile for Lorica.
#  Copyright (C) 2008 OMC Denmark ApS
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
#  MA 02111-1307 USA
#
# This file was originally generated by MPC.
#
# MPC Command:
# mwc.pl -type automake lorica.mwc

if LORICA_MUST_BUILD_ACETAO
LORICA_ROOT = $(LORICA_top_dir)
ACE_ROOT = $(LORICA_ROOT)/$(ACE_WRAPPERS_DIR)
TAO_ROOT = $(ACE_ROOT)/TAO
PATH = $(LORICA_ROOT)/bin:$(ACE_ROOT)/bin:$(ENV_PATH)

if LORICA_DARWIN
export DYLD_LIBRARY_PATH=$(LORICA_ROOT)/lib:$(ACE_ROOT)/lib:$(ENV_DYLD_LIBRARY_PATH)
else
export LD_LIBRARY_PATH = $(LORICA_ROOT)/lib:$(ACE_ROOT)/lib:$(ENV_LD_LIBRARY_PATH)
endif

endif # LORICA_MUST_BUILD_ACETAO

AM_CXXFLAGS = $(LORICA_CXXFLAGS)

bin_PROGRAMS = lorica

if LORICA_MUST_BUILD_ACETAO
lorica_CPPFLAGS =    \
	$(LORICA_DEFS)     \
	$(ACETAO_INCLUDES) \
	-DACE_HAS_SSL=1
else
lorica_CPPFLAGS =    \
	$(LORICA_DEFS)     \
	-DACE_HAS_SSL=1
endif

lorica_SOURCES =  \
	ReferenceMapper_i.cpp \
	main.cpp              \
	ntsvc.cpp             \
	proxy.cpp             \
	ReferenceMapper_i.h   \
	ntsvc.h               \
	proxy.h

if LORICA_STATIC
    STATIC_FLAGS = -all-static
else
    STATIC_FLAGS =
endif

if LORICA_MUST_BUILD_ACETAO
lorica_LDFLAGS = $(STATIC_FLAGS) \
	-L$(LORICA_top_dir)/lib                     \
	-L$(LORICA_top_dir)/$(ACE_WRAPPERS_DIR)/lib
else
lorica_LDFLAGS = $(STATIC_FLAGS) \
	-L$(LORICA_top_dir)/lib
endif

lorica_LDADD = \
	$(LORICA_top_dir)/src/lorica/liblorica_EvaluatorBase.la \
	$(LORICA_top_dir)/src/lorica/liblorica_Client.la        \
	$(LORICA_top_dir)/src/OCI/libOCI_AsynchProxyTools.la    \
	-lTAO_IFR_Client                                        \
	-lTAO_DynamicInterface                                  \
	-lTAO_EndpointPolicy                                    \
	-lTAO_Messaging                                         \
	-lTAO_IORTable                                          \
	-lTAO_SSLIOP                                            \
	-lTAO_PI_Server                                         \
	-lACE_SSL                                               \
	-lTAO_Security                                          \
	-lTAO_PI                                                \
	-lTAO_CodecFactory                                      \
	-lTAO_Valuetype                                         \
	-lTAO_PortableServer                                    \
	-lTAO_AnyTypeCode                                       \
	-lTAO                                                   \
	-lACE

if LORICA_MUST_BUILD_ACETAO
TAO_LIBS = \
	$(ACE_ROOT)/ace/libACE.so.$(LIBACE_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                            \
	$(ACE_ROOT)/ace/SSL/libACE_SSL.so.$(LIBACE_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                    \
	$(ACE_ROOT)/TAO/tao/libTAO_AnyTypeCode.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)            \
	$(ACE_ROOT)/TAO/tao/libTAO_CodecFactory.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)           \
	$(ACE_ROOT)/TAO/tao/libTAO_DynamicAny.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)             \
	$(ACE_ROOT)/TAO/tao/libTAO_DynamicInterface.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)       \
	$(ACE_ROOT)/TAO/tao/libTAO_EndpointPolicy.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)         \
	$(ACE_ROOT)/TAO/TAO_IDL/libTAO_IDL_BE.so.5.$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                             \
	$(ACE_ROOT)/TAO/TAO_IDL/libTAO_IDL_FE.so.5.$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                             \
	$(ACE_ROOT)/TAO/orbsvcs/IFR_Service/libTAO_IFR_BE.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE) \
	$(ACE_ROOT)/TAO/tao/libTAO_IFR_Client.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)             \
	$(ACE_ROOT)/TAO/orbsvcs/orbsvcs/libTAO_IFRService.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE) \
	$(ACE_ROOT)/TAO/tao/libTAO_ImR_Client.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)             \
	$(ACE_ROOT)/TAO/tao/libTAO_IORTable.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)               \
	$(ACE_ROOT)/TAO/tao/libTAO_Messaging.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)              \
	$(ACE_ROOT)/TAO/tao/libTAO_PI_Server.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)              \
	$(ACE_ROOT)/TAO/tao/libTAO_PI.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                     \
	$(ACE_ROOT)/TAO/tao/libTAO_PortableServer.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)         \
	$(ACE_ROOT)/TAO/orbsvcs/orbsvcs/libTAO_Security.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)   \
	$(ACE_ROOT)/TAO/tao/libTAO.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)                        \
	$(ACE_ROOT)/TAO/orbsvcs/orbsvcs/libTAO_SSLIOP.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)     \
	$(ACE_ROOT)/TAO/orbsvcs/orbsvcs/libTAO_Svc_Utils.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)  \
	$(ACE_ROOT)/TAO/tao/libTAO_TypeCodeFactory.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)        \
	$(ACE_ROOT)/TAO/tao/libTAO_Valuetype.so.$(LIBTAO_CURRENT).$(LIBACETAO_REVISION).$(LIBACETAO_AGE)
ACETAO_LIBdir = $(libdir)
ACETAO_LIB_DATA = $(TAO_LIBS)

TAO_EXECUTABLE_FILES = \
	$(ACE_ROOT)/apps/gperf/src/gperf            \
	$(ACE_ROOT)/TAO/TAO_IDL/tao_idl             \
	$(ACE_ROOT)/TAO/orbsvcs/IFR_Service/tao_ifr
TAO_EXECUTABLEdir = $(bindir)
TAO_EXECUTABLE_DATA = $(TAO_EXECUTABLE_FILES)
endif # LORICA_MUST_BUILD_ACETAO

if THIS_IS_NOT_A_DISTRIBUTION
CLEAN_IN_FILES = Makefile.in
else
CLEAN_IN_FILES =
endif

DISTCLEANFILES = $(CURDIR)/*.o $(CLEAN_IN_FILES) Makefile .deps .libs .obj lorica
CLEANFILES = $(CURDIR)/*.o 
