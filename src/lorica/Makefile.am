#  
#  Makefile for Lorica.
#  Copyright (C) 2008 OMC Denmark ApS
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
#  MA 02111-1307 USA
#
# This file was originally generated by MPC.
#
# MPC Command:
# mwc.pl -type automake lorica.mwc

if HAVE_ACE_ROOT
export LORICA_ROOT = $(LORICA_top_dir)
export ACE_ROOT = $(ACETAO_ROOT)
export TAO_ROOT = $(ACE_ROOT)/TAO
export PATH = $(LORICA_ROOT)/bin:$(ACE_ROOT)/bin:$(ENV_PATH)

if LORICA_DARWIN
export DYLD_LIBRARY_PATH=$(LORICA_ROOT)/lib:$(ACE_ROOT)/lib:$(ENV_DYLD_LIBRARY_PATH)
else
export LD_LIBRARY_PATH = $(LORICA_ROOT)/lib:$(ACE_ROOT)/lib:$(ENV_LD_LIBRARY_PATH)
endif

TAO_IDL = $(ACE_ROOT)/TAO/TAO_IDL/tao_idl
GPERF = $(ACE_ROOT)/apps/gperf/src/gperf
else
TAO_IDL = tao_idl
GPERF = gperf
endif # HAVE_ACE_ROOT

TAO_IDLFLAGS = -Sa -St -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -Wb,export_macro=Lorica_Client_Export -Wb,export_include=Lorica_Client_Export.h -I$(TAO_ROOT) -g $(GPERF)

AM_CXXFLAGS = $(LORICA_CXXFLAGS)

IDL_FILES = \
	ServerAgent.idl     \
	ReferenceMapper.idl

EXPORT_TARGETS = \
	Lorica_Client           \
	Lorica_EvaluatorBase    \
	Lorica_GenericEvaluator

BUILT_SOURCES = \
	ServerAgentC.cpp                 \
	ServerAgentC.h                   \
	ServerAgentC.inl                 \
	ServerAgentS.cpp                 \
	ServerAgentS.h                   \
	ServerAgentS.inl                 \
	ReferenceMapperC.cpp             \
	ReferenceMapperC.h               \
	ReferenceMapperC.inl             \
	ReferenceMapperS.cpp             \
	ReferenceMapperS.h               \
	ReferenceMapperS.inl             \
	Lorica_Client_Export.h           \
	Lorica_EvaluatorBase_Export.h    \
	Lorica_GenericEvaluator_Export.h

.NOTPARALLEL:

$(BUILT_SOURCES): $(IDL_FILES)
	@echo
	@for file in $(IDL_FILES); do \
		($(TAO_IDL) $(TAO_IDLFLAGS) $$file); \
	done
	@for target in $(EXPORT_TARGETS); do \
		(generate_export_file.pl $$target > $${target}_Export.h); \
	done

if LORICA_DEVEL
    idldir = ${datadir}/$(LORICA_idl_install_subdir)
    idl_DATA = $(IDL_FILES)
endif

noinst_LTLIBRARIES = liblorica_Client.la

if HAVE_ACE_ROOT
liblorica_Client_la_CPPFLAGS = \
	$(LORICA_DEFS)            \
	$(ACETAO_INCLUDES)        \
	-DLORICA_CLIENT_BUILD_DLL
else
liblorica_Client_la_CPPFLAGS = \
	$(LORICA_DEFS)            \
	-DLORICA_CLIENT_BUILD_DLL
endif

liblorica_Client_la_SOURCES = \
	ReferenceMapperC.cpp  \
	ReferenceMapperS.cpp  \
	ServerAgentC.cpp      \
	ServerAgentS.cpp      \
	ServerAgent_impl.cpp  \
	debug.cpp

liblorica_Client_la_LDFLAGS = -L$(LORICA_top_dir)/lib

noinst_HEADERS = \
	ReferenceMapper.idl  \
	ReferenceMapperC.h   \
	ReferenceMapperC.inl \
	ReferenceMapperS.h   \
	ReferenceMapperS.inl \
	ServerAgent.idl      \
	ServerAgentC.h       \
	ServerAgentC.inl     \
	ServerAgentS.h       \
	ServerAgentS.inl     \
	ServerAgent_impl.h   \
	debug.h

noinst_LTLIBRARIES += liblorica_EvaluatorBase.la

if HAVE_ACE_ROOT
liblorica_EvaluatorBase_la_CPPFLAGS = \
	$(LORICA_DEFS)                   \
	$(ACETAO_INCLUDES)               \
	-DACE_HAS_SSL=1                  \
	-DLORICA_EVALUATORBASE_BUILD_DLL
else
liblorica_EvaluatorBase_la_CPPFLAGS = \
	$(LORICA_DEFS)                   \
	-DACE_HAS_SSL=1                  \
	-DLORICA_EVALUATORBASE_BUILD_DLL
endif

liblorica_EvaluatorBase_la_SOURCES = \
	ConfigBase.cpp        \
	EvaluatorBase.cpp     \
	EvaluatorLoader.cpp   \
	FileConfig.cpp        \
	MapperRegistry.cpp    \
	NullProxyMapper.cpp   \
	ProxyMapper.cpp       \
	ProxyReplyHandler.cpp \
	ProxyServant.cpp      \
	RMVByMapped.cpp       \
	RMVByNative.cpp       \
	ReferenceMapValue.cpp

liblorica_EvaluatorBase_la_LDFLAGS = -L$(LORICA_top_dir)/lib

noinst_HEADERS += \
	ConfigBase.h        \
	EvaluatorBase.h     \
	EvaluatorLoader.h   \
	FileConfig.h        \
	MapperRegistry.h    \
	NullProxyMapper.h   \
	ProxyMapper.h       \
	ProxyReplyHandler.h \
	ProxyServant.h      \
	RMVByMapped.h       \
	RMVByNative.h       \
	ReferenceMapValue.h

noinst_LTLIBRARIES += liblorica_GenericEvaluator.la

if HAVE_ACE_ROOT
liblorica_GenericEvaluator_la_CPPFLAGS = \
	$(LORICA_DEFS)                      \
	$(ACETAO_INCLUDES)                  \
	-DACE_HAS_SSL=1                     \
	-DLORICA_GENERICEVALUATOR_BUILD_DLL
else
liblorica_GenericEvaluator_la_CPPFLAGS = \
	$(LORICA_DEFS)                      \
	-DACE_HAS_SSL=1                     \
	-DLORICA_GENERICEVALUATOR_BUILD_DLL
endif

liblorica_GenericEvaluator_la_SOURCES = \
	GenericEvaluator.cpp \
	GenericLoader.cpp    \
	GenericMapper.cpp    \
	IFRService.cpp

liblorica_GenericEvaluator_la_LDFLAGS = -L$(LORICA_top_dir)/lib

noinst_HEADERS += \
	GenericEvaluator.h \
	GenericLoader.h    \
	GenericMapper.h    \
	IFRService.h


if THIS_IS_NOT_A_DISTRIBUTION
CLEAN_IN_FILES = Makefile.in
else
CLEAN_IN_FILES =
endif

DISTCLEANFILES = $(BUILT_SOURCES) $(CURDIR)/*.o $(CLEAN_IN_FILES) $(EXPORT_FILES) Makefile .deps .libs .shobj *.dylib
CLEANFILES = $(CURDIR)/*.o 
