// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:381


#include "TestC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/Basic_Arguments.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for Test::First.

Test::First_ptr
TAO::Objref_Traits<Test::First>::duplicate (
    Test::First_ptr p)
{
  return Test::First::_duplicate (p);
}

void
TAO::Objref_Traits<Test::First>::release (
    Test::First_ptr p)
{
  ::CORBA::release (p);
}

Test::First_ptr
TAO::Objref_Traits<Test::First>::nil (void)
{
  return Test::First::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::First>::marshal (
    const Test::First_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*Test__TAO_First_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void Test::First::method (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_First_Proxy_Broker_ == 0)
    {
      Test_First_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "method",
      6,
      this->the_TAO_First_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

Test::First::First (void)
 : the_TAO_First_Proxy_Broker_ (0)
{
  this->Test_First_setup_collocation ();
}

void
Test::First::Test_First_setup_collocation ()
{
  if (::Test__TAO_First_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_First_Proxy_Broker_ =
        ::Test__TAO_First_Proxy_Broker_Factory_function_pointer (this);
    }
}

Test::First::~First (void)
{}

Test::First_ptr
Test::First::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<First>::narrow (
        _tao_objref,
        "IDL:Test/First:1.0",
        Test__TAO_First_Proxy_Broker_Factory_function_pointer
      );
}

Test::First_ptr
Test::First::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<First>::unchecked_narrow (
        _tao_objref,
        "IDL:Test/First:1.0",
        Test__TAO_First_Proxy_Broker_Factory_function_pointer
      );
}

Test::First_ptr
Test::First::_duplicate (First_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
Test::First::_tao_release (First_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::First::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:Test/First:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::First::_interface_repository_id (void) const
{
  return "IDL:Test/First:1.0";
}

::CORBA::Boolean
Test::First::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for Test::Second.

Test::Second_ptr
TAO::Objref_Traits<Test::Second>::duplicate (
    Test::Second_ptr p)
{
  return Test::Second::_duplicate (p);
}

void
TAO::Objref_Traits<Test::Second>::release (
    Test::Second_ptr p)
{
  ::CORBA::release (p);
}

Test::Second_ptr
TAO::Objref_Traits<Test::Second>::nil (void)
{
  return Test::Second::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::Second>::marshal (
    const Test::Second_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*Test__TAO_Second_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void Test::Second::method (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Second_Proxy_Broker_ == 0)
    {
      Test_Second_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "method",
      6,
      this->the_TAO_Second_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

Test::Second::Second (void)
 : the_TAO_Second_Proxy_Broker_ (0)
{
  this->Test_Second_setup_collocation ();
}

void
Test::Second::Test_Second_setup_collocation ()
{
  if (::Test__TAO_Second_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Second_Proxy_Broker_ =
        ::Test__TAO_Second_Proxy_Broker_Factory_function_pointer (this);
    }
}

Test::Second::~Second (void)
{}

Test::Second_ptr
Test::Second::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<Second>::narrow (
        _tao_objref,
        "IDL:Test/Second:1.0",
        Test__TAO_Second_Proxy_Broker_Factory_function_pointer
      );
}

Test::Second_ptr
Test::Second::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<Second>::unchecked_narrow (
        _tao_objref,
        "IDL:Test/Second:1.0",
        Test__TAO_Second_Proxy_Broker_Factory_function_pointer
      );
}

Test::Second_ptr
Test::Second::_duplicate (Second_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
Test::Second::_tao_release (Second_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::Second::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:Test/Second:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::Second::_interface_repository_id (void) const
{
  return "IDL:Test/Second:1.0";
}

::CORBA::Boolean
Test::Second::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for Test::Third.

Test::Third_ptr
TAO::Objref_Traits<Test::Third>::duplicate (
    Test::Third_ptr p)
{
  return Test::Third::_duplicate (p);
}

void
TAO::Objref_Traits<Test::Third>::release (
    Test::Third_ptr p)
{
  ::CORBA::release (p);
}

Test::Third_ptr
TAO::Objref_Traits<Test::Third>::nil (void)
{
  return Test::Third::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Test::Third>::marshal (
    const Test::Third_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*Test__TAO_Third_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void Test::Third::method (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Third_Proxy_Broker_ == 0)
    {
      Test_Third_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "method",
      6,
      this->the_TAO_Third_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

Test::Third::Third (void)
 : the_TAO_Third_Proxy_Broker_ (0)
{
  this->Test_Third_setup_collocation ();
}

void
Test::Third::Test_Third_setup_collocation ()
{
  if (::Test__TAO_Third_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Third_Proxy_Broker_ =
        ::Test__TAO_Third_Proxy_Broker_Factory_function_pointer (this);
    }
}

Test::Third::~Third (void)
{}

Test::Third_ptr
Test::Third::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<Third>::narrow (
        _tao_objref,
        "IDL:Test/Third:1.0",
        Test__TAO_Third_Proxy_Broker_Factory_function_pointer
      );
}

Test::Third_ptr
Test::Third::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<Third>::unchecked_narrow (
        _tao_objref,
        "IDL:Test/Third:1.0",
        Test__TAO_Third_Proxy_Broker_Factory_function_pointer
      );
}

Test::Third_ptr
Test::Third::_duplicate (Third_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
Test::Third::_tao_release (Third_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Test::Third::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:Test/Third:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Test::Third::_interface_repository_id (void) const
{
  return "IDL:Test/Third:1.0";
}

::CORBA::Boolean
Test::Third::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::First_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::First_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Test::First RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        Test__TAO_First_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Second_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Second_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Test::Second RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        Test__TAO_Second_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::Third_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::Third_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Test::Third RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        Test__TAO_Third_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



