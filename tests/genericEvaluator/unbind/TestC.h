// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:135

#ifndef _TAO_IDL_TESTC_H_
#define _TAO_IDL_TESTC_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include /**/ "tao/Versioned_Namespace.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from 
// be/be_visitor_root/root_ch.cpp:62
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:49

namespace Test
{
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:638

#if !defined (_TEST_FIRST__VAR_OUT_CH_)
#define _TEST_FIRST__VAR_OUT_CH_
  
  class First;
  typedef First *First_ptr;
  
  typedef
    TAO_Objref_Var_T<
        First
      >
    First_var;
  
  typedef
    TAO_Objref_Out_T<
        First
      >
    First_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_TEST_FIRST_CH_)
#define _TEST_FIRST_CH_
  
  class  First
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<First>;
    typedef First_ptr _ptr_type;
    typedef First_var _var_type;
    typedef First_out _out_type;
    
    // The static operations.
    static First_ptr _duplicate (First_ptr obj);
    
    static void _tao_release (First_ptr obj);
    
    static First_ptr _narrow (::CORBA::Object_ptr obj);
    static First_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static First_ptr _nil (void)
    {
      return static_cast<First_ptr> (0);
    }
    
    
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void method (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_First_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    First (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void Test_First_setup_collocation (void);
    
    // Concrete non-local interface only.
    First (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    First (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~First (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    First (const First &);
    
    void operator= (const First &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:638

#if !defined (_TEST_SECOND__VAR_OUT_CH_)
#define _TEST_SECOND__VAR_OUT_CH_
  
  class Second;
  typedef Second *Second_ptr;
  
  typedef
    TAO_Objref_Var_T<
        Second
      >
    Second_var;
  
  typedef
    TAO_Objref_Out_T<
        Second
      >
    Second_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_TEST_SECOND_CH_)
#define _TEST_SECOND_CH_
  
  class  Second
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Second>;
    typedef Second_ptr _ptr_type;
    typedef Second_var _var_type;
    typedef Second_out _out_type;
    
    // The static operations.
    static Second_ptr _duplicate (Second_ptr obj);
    
    static void _tao_release (Second_ptr obj);
    
    static Second_ptr _narrow (::CORBA::Object_ptr obj);
    static Second_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Second_ptr _nil (void)
    {
      return static_cast<Second_ptr> (0);
    }
    
    
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void method (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Second_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Second (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void Test_Second_setup_collocation (void);
    
    // Concrete non-local interface only.
    Second (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    Second (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~Second (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Second (const Second &);
    
    void operator= (const Second &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:638

#if !defined (_TEST_THIRD__VAR_OUT_CH_)
#define _TEST_THIRD__VAR_OUT_CH_
  
  class Third;
  typedef Third *Third_ptr;
  
  typedef
    TAO_Objref_Var_T<
        Third
      >
    Third_var;
  
  typedef
    TAO_Objref_Out_T<
        Third
      >
    Third_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_TEST_THIRD_CH_)
#define _TEST_THIRD_CH_
  
  class  Third
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Third>;
    typedef Third_ptr _ptr_type;
    typedef Third_var _var_type;
    typedef Third_out _out_type;
    
    // The static operations.
    static Third_ptr _duplicate (Third_ptr obj);
    
    static void _tao_release (Third_ptr obj);
    
    static Third_ptr _narrow (::CORBA::Object_ptr obj);
    static Third_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Third_ptr _nil (void)
    {
      return static_cast<Third_ptr> (0);
    }
    
    
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void method (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Third_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Third (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void Test_Third_setup_collocation (void);
    
    // Concrete non-local interface only.
    Third (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    Third (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~Third (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Third (const Third &);
    
    void operator= (const Third &);
  };

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:78

} // module Test

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// be/be_visitor_root/root.cpp:139

extern 
TAO::Collocation_Proxy_Broker *
(*Test__TAO_First_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*Test__TAO_Second_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*Test__TAO_Third_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:64

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TEST_FIRST__TRAITS_)
#define _TEST_FIRST__TRAITS_
  
  template<>
  struct  Objref_Traits< ::Test::First>
  {
    static ::Test::First_ptr duplicate (
        ::Test::First_ptr p
      );
    static void release (
        ::Test::First_ptr p
      );
    static ::Test::First_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::First_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_TEST_SECOND__TRAITS_)
#define _TEST_SECOND__TRAITS_
  
  template<>
  struct  Objref_Traits< ::Test::Second>
  {
    static ::Test::Second_ptr duplicate (
        ::Test::Second_ptr p
      );
    static void release (
        ::Test::Second_ptr p
      );
    static ::Test::Second_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::Second_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_TEST_THIRD__TRAITS_)
#define _TEST_THIRD__TRAITS_
  
  template<>
  struct  Objref_Traits< ::Test::Third>
  {
    static ::Test::Third_ptr duplicate (
        ::Test::Third_ptr p
      );
    static void release (
        ::Test::Third_ptr p
      );
    static ::Test::Third_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Test::Third_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::First_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::First_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Second_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Second_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test::Third_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test::Third_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1226
#if defined (__ACE_INLINE__)
#include "TestC.inl"
#endif /* defined INLINE */

#endif /* ifndef */


