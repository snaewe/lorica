// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:135

#ifndef _TAO_IDL_TESTC_H_
#define _TAO_IDL_TESTC_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include /**/ "tao/Versioned_Namespace.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from 
// be/be_visitor_root/root_ch.cpp:62
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_DSI_LONGSEQ_CH_)
#define _DSI_LONGSEQ_CH_

class DSI_LongSeq;

typedef
  TAO_FixedSeq_Var_T<
      DSI_LongSeq
    >
  DSI_LongSeq_var;

typedef
  TAO_Seq_Out_T<
      DSI_LongSeq
    >
  DSI_LongSeq_out;

class  DSI_LongSeq
  : public
      TAO::unbounded_value_sequence<
          ::CORBA::Long
        >
{
public:
  DSI_LongSeq (void);
  DSI_LongSeq ( ::CORBA::ULong max);
  DSI_LongSeq (
      ::CORBA::ULong max,
      ::CORBA::ULong length,
      ::CORBA::Long* buffer, 
      ::CORBA::Boolean release = false
    );
  DSI_LongSeq (const DSI_LongSeq &);
  virtual ~DSI_LongSeq (void);
  
  static void _tao_any_destructor (void *);
  
  typedef DSI_LongSeq_var _var_type;
  typedef DSI_LongSeq_out _out_type;
  
  
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:49

extern  ::CORBA::TypeCode_ptr const _tc_DSI_LongSeq;

// TAO_IDL - Generated from
// be/be_type.cpp:269

struct Structure;

typedef
  TAO_Var_Var_T<
      Structure
    >
  Structure_var;

typedef
  TAO_Out_T<
      Structure
    >
  Structure_out;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_ch.cpp:57

struct  Structure
{
  typedef Structure_var _var_type;
  typedef Structure_out _out_type;
  
  static void _tao_any_destructor (void *);
  ::CORBA::Short i;
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:107

#if !defined (_STRUCTURE__TAO_SEQ_CORBA_LONG__CH_)
#define _STRUCTURE__TAO_SEQ_CORBA_LONG__CH_
  
  class  _tao_seq_CORBA_Long_
    : public
        TAO::unbounded_value_sequence<
            ::CORBA::Long
          >
  {
  public:
    _tao_seq_CORBA_Long_ (void);
    _tao_seq_CORBA_Long_ ( ::CORBA::ULong max);
    _tao_seq_CORBA_Long_ (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Long* buffer, 
        ::CORBA::Boolean release = false
      );
    _tao_seq_CORBA_Long_ (const _tao_seq_CORBA_Long_ &);
    virtual ~_tao_seq_CORBA_Long_ (void);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_field/field_ch.cpp:358
  
  typedef _tao_seq_CORBA_Long_ _seq_seq;
  _tao_seq_CORBA_Long_ seq;
  ::CORBA::Object_var obj;
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:49

extern  ::CORBA::TypeCode_ptr const _tc_Structure;

// TAO_IDL - Generated from
// be/be_type.cpp:269

class Test_Union;

typedef
  TAO_Var_Var_T<
      Test_Union
    >
  Test_Union_var;

typedef
  TAO_Out_T<
      Test_Union
    >
  Test_Union_out;

#if !defined (_TEST_UNION_CH_)
#define _TEST_UNION_CH_

class  Test_Union
{
public:
  Test_Union (void);
  Test_Union (const Test_Union &);
  ~Test_Union (void);
  static void _tao_any_destructor (void*);
  
  Test_Union &operator= (const Test_Union &);
  
  // TAO_IDL - Generated from
  // be/be_visitor_union/discriminant_ch.cpp:114
  
  void _d ( ::CORBA::Short);
  ::CORBA::Short _d (void) const;
  
  // TAO_IDL - Generated from
  // be/be_visitor_union/union_ch.cpp:113
  
  typedef Test_Union_var _var_type;
  typedef Test_Union_out _out_type;
  
  // TAO_IDL - Generated from
  // be/be_visitor_union_branch/public_ch.cpp:460
  
  void i ( ::CORBA::Short);
  ::CORBA::Short i (void) const;
  
  // TAO_IDL - Generated from
  // be/be_visitor_union_branch/public_ch.cpp:460
  
  void obj (const ::CORBA::Object_ptr);
  ::CORBA::Object_ptr obj (void) const;
  
  // TAO_IDL - Generated from
  // be/be_visitor_union_branch/public_ch.cpp:591
  
  void foo (char *);
  void foo (const char *);
  void foo (const ::CORBA::String_var&);
  const char *foo (void) const;
private:
  ::CORBA::Short disc_;
  ::CORBA::Short holder_;
  
  union
  {
    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/private_ch.cpp:388
    ::CORBA::Short i_;
    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/private_ch.cpp:388
    CORBA::Object_var *obj_;
    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/private_ch.cpp:485
    char *foo_;
  } u_;
  
  /// TAO extension - frees any allocated storage.
  void _reset (void);
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:49

extern  ::CORBA::TypeCode_ptr const _tc_Test_Union;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ch.cpp:53

#if !defined (_TEST_EXCEPTION_CH_)
#define _TEST_EXCEPTION_CH_

class  test_exception : public ::CORBA::UserException
{
public:
  
  ::CORBA::Short error_code;
  TAO::String_Manager error_message;
  TAO::String_Manager status_message;
  test_exception (void);
  test_exception (const test_exception &);
  ~test_exception (void);

  test_exception &operator= (const test_exception &);
  
  static void _tao_any_destructor (void *);
  
  static test_exception *_downcast ( ::CORBA::Exception *);
  static const test_exception *_downcast ( ::CORBA::Exception const *);
  
  static ::CORBA::Exception *_alloc (void);
  
  virtual ::CORBA::Exception *_tao_duplicate (void) const;

  virtual void _raise (void) const;

  virtual void _tao_encode (TAO_OutputCDR &cdr) const;
  virtual void _tao_decode (TAO_InputCDR &cdr);
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ctor.cpp:66
  
  test_exception (
      ::CORBA::Short _tao_error_code,
      const char * _tao_error_message,
      const char * _tao_status_message
    );
  
  virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:49

extern  ::CORBA::TypeCode_ptr const _tc_test_exception;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_interface.cpp:638

#if !defined (_SIMPLE_SERVER__VAR_OUT_CH_)
#define _SIMPLE_SERVER__VAR_OUT_CH_

class Simple_Server;
typedef Simple_Server *Simple_Server_ptr;

typedef
  TAO_Objref_Var_T<
      Simple_Server
    >
  Simple_Server_var;

typedef
  TAO_Objref_Out_T<
      Simple_Server
    >
  Simple_Server_out;

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_SIMPLE_SERVER_CH_)
#define _SIMPLE_SERVER_CH_

class  Simple_Server
  : public virtual ::CORBA::Object
{
public:
  friend class TAO::Narrow_Utils<Simple_Server>;
  typedef Simple_Server_ptr _ptr_type;
  typedef Simple_Server_var _var_type;
  typedef Simple_Server_out _out_type;
  
  // The static operations.
  static Simple_Server_ptr _duplicate (Simple_Server_ptr obj);
  
  static void _tao_release (Simple_Server_ptr obj);
  
  static Simple_Server_ptr _narrow (::CORBA::Object_ptr obj);
  static Simple_Server_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
  static Simple_Server_ptr _nil (void)
  {
    return static_cast<Simple_Server_ptr> (0);
  }
  
  static void _tao_any_destructor (void *);
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_ch.cpp:46
  
  virtual ::CORBA::Short s (
      void);
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_ch.cpp:46
  
  virtual void s (
      ::CORBA::Short s);
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_ch.cpp:46
  
  virtual ::CORBA::Boolean any_test (
      const ::CORBA::Any & a);
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_ch.cpp:46
  
  virtual ::CORBA::Long struct_test (
      ::CORBA::Long x,
      const ::Structure & the_in_structure,
      ::Structure_out the_out_structure,
      char *& name);
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_ch.cpp:46
  
  virtual void give_union (
      const ::Test_Union & arg);
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_ch.cpp:46
  
  virtual ::CORBA::Object_ptr echo_object (
      ::CORBA::Object_ptr obj);
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_ch.cpp:46
  
  virtual void raise_user_exception (
      void);
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_ch.cpp:46
  
  virtual void raise_system_exception (
      void);
  
  // TAO_IDL - Generated from
  // be/be_visitor_operation/operation_ch.cpp:46
  
  virtual void shutdown (
      void);
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:216
  
  virtual ::CORBA::Boolean _is_a (const char *type_id);
  virtual const char* _interface_repository_id (void) const;
  virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
private:
  TAO::Collocation_Proxy_Broker *the_TAO_Simple_Server_Proxy_Broker_;

protected:
  // Concrete interface only.
  Simple_Server (void);
  
  // These methods travese the inheritance tree and set the
  // parents piece of the given class in the right mode.
  virtual void Simple_Server_setup_collocation (void);
  
  // Concrete non-local interface only.
  Simple_Server (
      IOP::IOR *ior,
      TAO_ORB_Core *orb_core = 0);
  
  // Non-local interface only.
  Simple_Server (
      TAO_Stub *objref,
      ::CORBA::Boolean _tao_collocated = false,
      TAO_Abstract_ServantBase *servant = 0,
      TAO_ORB_Core *orb_core = 0);
  
  virtual ~Simple_Server (void);

private:
  // Private and unimplemented for concrete interfaces.
  Simple_Server (const Simple_Server &);
  
  void operator= (const Simple_Server &);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:49

extern  ::CORBA::TypeCode_ptr const _tc_Simple_Server;

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// be/be_visitor_root/root.cpp:139

extern 
TAO::Collocation_Proxy_Broker *
(*_TAO_Simple_Server_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:64

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_SIMPLE_SERVER__TRAITS_)
#define _SIMPLE_SERVER__TRAITS_
  
  template<>
  struct  Objref_Traits< ::Simple_Server>
  {
    static ::Simple_Server_ptr duplicate (
        ::Simple_Server_ptr p
      );
    static void release (
        ::Simple_Server_ptr p
      );
    static ::Simple_Server_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Simple_Server_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const DSI_LongSeq &); // copying version
 void operator<<= ( ::CORBA::Any &, DSI_LongSeq*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, DSI_LongSeq *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const DSI_LongSeq *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Structure &); // copying version
 void operator<<= (::CORBA::Any &, Structure*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Structure *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Structure *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const Test_Union &); // copying version
 void operator<<= (::CORBA::Any &, Test_Union*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Test_Union *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Test_Union *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:53
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const test_exception &); // copying version
 void operator<<= (::CORBA::Any &, test_exception*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, test_exception *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const test_exception *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Simple_Server_ptr); // copying
 void operator<<= (::CORBA::Any &, Simple_Server_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Simple_Server_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_DSI_LongSeq_H_
#define _TAO_CDR_OP_DSI_LongSeq_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DSI_LongSeq &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DSI_LongSeq &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_DSI_LongSeq_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Structure &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Structure &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:71

#if !defined _TAO_CDR_OP_Structure__tao_seq_CORBA_Long__H_
#define _TAO_CDR_OP_Structure__tao_seq_CORBA_Long__H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Structure::_tao_seq_CORBA_Long_ &_tao_sequence
  );
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Structure::_tao_seq_CORBA_Long_ &_tao_sequence
  );
TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Structure__tao_seq_CORBA_Long__H_ */

// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Test_Union &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Test_Union &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:52
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const test_exception &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, test_exception &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Simple_Server_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Simple_Server_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1226
#if defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* defined INLINE */

#endif /* ifndef */


