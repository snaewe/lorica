// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:135

#ifndef _TAO_IDL_TESTC_H_
#define _TAO_IDL_TESTC_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include /**/ "tao/Versioned_Namespace.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from 
// be/be_visitor_root/root_ch.cpp:62
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:49

namespace UnionTest
{
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:638

#if !defined (_UNIONTEST_COMMENTRESTRICTION__VAR_OUT_CH_)
#define _UNIONTEST_COMMENTRESTRICTION__VAR_OUT_CH_
  
  class CommentRestriction;
  typedef CommentRestriction *CommentRestriction_ptr;
  
  typedef
    TAO_Objref_Var_T<
        CommentRestriction
      >
    CommentRestriction_var;
  
  typedef
    TAO_Objref_Out_T<
        CommentRestriction
      >
    CommentRestriction_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_UNIONTEST_COMMENTRESTRICTION_CH_)
#define _UNIONTEST_COMMENTRESTRICTION_CH_
  
  class  CommentRestriction
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<CommentRestriction>;
    typedef CommentRestriction_ptr _ptr_type;
    typedef CommentRestriction_var _var_type;
    typedef CommentRestriction_out _out_type;
    
    // The static operations.
    static CommentRestriction_ptr _duplicate (CommentRestriction_ptr obj);
    
    static void _tao_release (CommentRestriction_ptr obj);
    
    static CommentRestriction_ptr _narrow (::CORBA::Object_ptr obj);
    static CommentRestriction_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static CommentRestriction_ptr _nil (void)
    {
      return static_cast<CommentRestriction_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual char * message (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_CommentRestriction_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    CommentRestriction (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void UnionTest_CommentRestriction_setup_collocation (void);
    
    // Concrete non-local interface only.
    CommentRestriction (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    CommentRestriction (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~CommentRestriction (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    CommentRestriction (const CommentRestriction &);
    
    void operator= (const CommentRestriction &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_CommentRestriction;
  
  // TAO_IDL - Generated from
  // be/be_type.cpp:269
  
  class Restriction;
  
  typedef
    TAO_Var_Var_T<
        Restriction
      >
    Restriction_var;
  
  typedef
    TAO_Out_T<
        Restriction
      >
    Restriction_out;

#if !defined (_UNIONTEST_RESTRICTION_CH_)
#define _UNIONTEST_RESTRICTION_CH_
  
  class  Restriction
  {
  public:
    Restriction (void);
    Restriction (const Restriction &);
    ~Restriction (void);
    static void _tao_any_destructor (void*);
    
    Restriction &operator= (const Restriction &);
    
    // TAO_IDL - Generated from
    // be/be_visitor_union/discriminant_ch.cpp:114
    
    void _d ( ::CORBA::Char);
    ::CORBA::Char _d (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:113
    
    typedef Restriction_var _var_type;
    typedef Restriction_out _out_type;
    
    // TAO_IDL - Generated from
    // be/be_visitor_union_branch/public_ch.cpp:244
    
    void comment (UnionTest::CommentRestriction_ptr);
    UnionTest::CommentRestriction_ptr comment (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_union/union_ch.cpp:149
    
    void _default (void);
  private:
    ::CORBA::Char disc_;
    ::CORBA::Char holder_;
    
    union
    {
      // TAO_IDL - Generated from
      // be/be_visitor_union_branch/private_ch.cpp:190
      UnionTest::CommentRestriction_var *comment_;
    } u_;
    
    /// TAO extension - frees any allocated storage.
    void _reset (void);
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_Restriction;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:638

#if !defined (_UNIONTEST_RESTRICTIONCONTAINER__VAR_OUT_CH_)
#define _UNIONTEST_RESTRICTIONCONTAINER__VAR_OUT_CH_
  
  class RestrictionContainer;
  typedef RestrictionContainer *RestrictionContainer_ptr;
  
  typedef
    TAO_Objref_Var_T<
        RestrictionContainer
      >
    RestrictionContainer_var;
  
  typedef
    TAO_Objref_Out_T<
        RestrictionContainer
      >
    RestrictionContainer_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_UNIONTEST_RESTRICTIONCONTAINER_CH_)
#define _UNIONTEST_RESTRICTIONCONTAINER_CH_
  
  class  RestrictionContainer
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<RestrictionContainer>;
    typedef RestrictionContainer_ptr _ptr_type;
    typedef RestrictionContainer_var _var_type;
    typedef RestrictionContainer_out _out_type;
    
    // The static operations.
    static RestrictionContainer_ptr _duplicate (RestrictionContainer_ptr obj);
    
    static void _tao_release (RestrictionContainer_ptr obj);
    
    static RestrictionContainer_ptr _narrow (::CORBA::Object_ptr obj);
    static RestrictionContainer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static RestrictionContainer_ptr _nil (void)
    {
      return static_cast<RestrictionContainer_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::UnionTest::Restriction * content (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_RestrictionContainer_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    RestrictionContainer (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void UnionTest_RestrictionContainer_setup_collocation (void);
    
    // Concrete non-local interface only.
    RestrictionContainer (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    RestrictionContainer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~RestrictionContainer (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    RestrictionContainer (const RestrictionContainer &);
    
    void operator= (const RestrictionContainer &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_RestrictionContainer;
  
  // TAO_IDL - Generated from
  // be/be_interface.cpp:638

#if !defined (_UNIONTEST_TESTSERVER__VAR_OUT_CH_)
#define _UNIONTEST_TESTSERVER__VAR_OUT_CH_
  
  class TestServer;
  typedef TestServer *TestServer_ptr;
  
  typedef
    TAO_Objref_Var_T<
        TestServer
      >
    TestServer_var;
  
  typedef
    TAO_Objref_Out_T<
        TestServer
      >
    TestServer_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_UNIONTEST_TESTSERVER_CH_)
#define _UNIONTEST_TESTSERVER_CH_
  
  class  TestServer
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<TestServer>;
    typedef TestServer_ptr _ptr_type;
    typedef TestServer_var _var_type;
    typedef TestServer_out _out_type;
    
    // The static operations.
    static TestServer_ptr _duplicate (TestServer_ptr obj);
    
    static void _tao_release (TestServer_ptr obj);
    
    static TestServer_ptr _narrow (::CORBA::Object_ptr obj);
    static TestServer_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TestServer_ptr _nil (void)
    {
      return static_cast<TestServer_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void Restrict (
        ::UnionTest::RestrictionContainer_ptr restriction);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void shutdown (
        void);
    
    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_TestServer_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    TestServer (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void UnionTest_TestServer_setup_collocation (void);
    
    // Concrete non-local interface only.
    TestServer (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    TestServer (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~TestServer (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TestServer (const TestServer &);
    
    void operator= (const TestServer &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_TestServer;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:78

} // module UnionTest

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// be/be_visitor_root/root.cpp:139

extern 
TAO::Collocation_Proxy_Broker *
(*UnionTest__TAO_CommentRestriction_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*UnionTest__TAO_RestrictionContainer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

extern 
TAO::Collocation_Proxy_Broker *
(*UnionTest__TAO_TestServer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:64

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_UNIONTEST_COMMENTRESTRICTION__TRAITS_)
#define _UNIONTEST_COMMENTRESTRICTION__TRAITS_
  
  template<>
  struct  Objref_Traits< ::UnionTest::CommentRestriction>
  {
    static ::UnionTest::CommentRestriction_ptr duplicate (
        ::UnionTest::CommentRestriction_ptr p
      );
    static void release (
        ::UnionTest::CommentRestriction_ptr p
      );
    static ::UnionTest::CommentRestriction_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::UnionTest::CommentRestriction_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_UNIONTEST_RESTRICTIONCONTAINER__TRAITS_)
#define _UNIONTEST_RESTRICTIONCONTAINER__TRAITS_
  
  template<>
  struct  Objref_Traits< ::UnionTest::RestrictionContainer>
  {
    static ::UnionTest::RestrictionContainer_ptr duplicate (
        ::UnionTest::RestrictionContainer_ptr p
      );
    static void release (
        ::UnionTest::RestrictionContainer_ptr p
      );
    static ::UnionTest::RestrictionContainer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::UnionTest::RestrictionContainer_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */

#if !defined (_UNIONTEST_TESTSERVER__TRAITS_)
#define _UNIONTEST_TESTSERVER__TRAITS_
  
  template<>
  struct  Objref_Traits< ::UnionTest::TestServer>
  {
    static ::UnionTest::TestServer_ptr duplicate (
        ::UnionTest::TestServer_ptr p
      );
    static void release (
        ::UnionTest::TestServer_ptr p
      );
    static ::UnionTest::TestServer_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::UnionTest::TestServer_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace UnionTest
{
   void operator<<= ( ::CORBA::Any &, CommentRestriction_ptr); // copying
   void operator<<= ( ::CORBA::Any &, CommentRestriction_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, CommentRestriction_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, UnionTest::CommentRestriction_ptr); // copying
 void operator<<= (::CORBA::Any &, UnionTest::CommentRestriction_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, UnionTest::CommentRestriction_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_union/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const UnionTest::Restriction &); // copying version
 void operator<<= (::CORBA::Any &, UnionTest::Restriction*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, UnionTest::Restriction *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const UnionTest::Restriction *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace UnionTest
{
   void operator<<= ( ::CORBA::Any &, RestrictionContainer_ptr); // copying
   void operator<<= ( ::CORBA::Any &, RestrictionContainer_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RestrictionContainer_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, UnionTest::RestrictionContainer_ptr); // copying
 void operator<<= (::CORBA::Any &, UnionTest::RestrictionContainer_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, UnionTest::RestrictionContainer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace UnionTest
{
   void operator<<= ( ::CORBA::Any &, TestServer_ptr); // copying
   void operator<<= ( ::CORBA::Any &, TestServer_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, TestServer_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, UnionTest::TestServer_ptr); // copying
 void operator<<= (::CORBA::Any &, UnionTest::TestServer_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, UnionTest::TestServer_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const UnionTest::CommentRestriction_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, UnionTest::CommentRestriction_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const UnionTest::Restriction &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, UnionTest::Restriction &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const UnionTest::RestrictionContainer_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, UnionTest::RestrictionContainer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const UnionTest::TestServer_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, UnionTest::TestServer_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1226
#if defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* defined INLINE */

#endif /* ifndef */


