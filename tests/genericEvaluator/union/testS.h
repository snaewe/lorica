// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:487

#ifndef _TAO_IDL_TESTS_H_
#define _TAO_IDL_TESTS_H_


#include "testC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Collocation_Proxy_Broker.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:49

namespace POA_UnionTest
{
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class CommentRestriction;
  typedef CommentRestriction *CommentRestriction_ptr;
  
  class  CommentRestriction
    : public virtual PortableServer::ServantBase
  {
  protected:
    CommentRestriction (void);
  
  public:
    // Useful for template programming.
    typedef ::UnionTest::CommentRestriction _stub_type;
    typedef ::UnionTest::CommentRestriction_ptr _stub_ptr_type;
    typedef ::UnionTest::CommentRestriction_var _stub_var_type;
    
    CommentRestriction (const CommentRestriction& rhs);
    virtual ~CommentRestriction (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::UnionTest::CommentRestriction *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual char * message (
        void) = 0;
    
    static void _get_message_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class RestrictionContainer;
  typedef RestrictionContainer *RestrictionContainer_ptr;
  
  class  RestrictionContainer
    : public virtual PortableServer::ServantBase
  {
  protected:
    RestrictionContainer (void);
  
  public:
    // Useful for template programming.
    typedef ::UnionTest::RestrictionContainer _stub_type;
    typedef ::UnionTest::RestrictionContainer_ptr _stub_ptr_type;
    typedef ::UnionTest::RestrictionContainer_var _stub_var_type;
    
    RestrictionContainer (const RestrictionContainer& rhs);
    virtual ~RestrictionContainer (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::UnionTest::RestrictionContainer *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual ::UnionTest::Restriction * content (
        void) = 0;
    
    static void _get_content_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:87
  
  class TestServer;
  typedef TestServer *TestServer_ptr;
  
  class  TestServer
    : public virtual PortableServer::ServantBase
  {
  protected:
    TestServer (void);
  
  public:
    // Useful for template programming.
    typedef ::UnionTest::TestServer _stub_type;
    typedef ::UnionTest::TestServer_ptr _stub_ptr_type;
    typedef ::UnionTest::TestServer_var _stub_var_type;
    
    TestServer (const TestServer& rhs);
    virtual ~TestServer (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant
      );
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::UnionTest::TestServer *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void Restrict (
        ::UnionTest::RestrictionContainer_ptr restriction) = 0;
    
    static void Restrict_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:45
    
    virtual void shutdown (
        void) = 0;
    
    static void shutdown_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant
      );
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:80

} // module UnionTest

// TAO_IDL - Generated from 
// be/be_codegen.cpp:1288


#if defined (__ACE_INLINE__)
#include "testS.inl"
#endif /* defined INLINE */

#endif /* ifndef */

