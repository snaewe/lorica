// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:381


#include "testC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "testC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:976

#if !defined (_UNIONTEST_RESTRICTION__ARG_TRAITS_)
#define _UNIONTEST_RESTRICTION__ARG_TRAITS_
  
  template<>
  class Arg_Traits<UnionTest::Restriction>
    : public
        Var_Size_Arg_Traits_T<
            UnionTest::Restriction,
            TAO::Any_Insert_Policy_Stream <UnionTest::Restriction>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:141

#if !defined (_UNIONTEST_RESTRICTIONCONTAINER__ARG_TRAITS_)
#define _UNIONTEST_RESTRICTIONCONTAINER__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<UnionTest::RestrictionContainer>
    : public
        Object_Arg_Traits_T<
            UnionTest::RestrictionContainer_ptr,
            UnionTest::RestrictionContainer_var,
            UnionTest::RestrictionContainer_out,
            TAO::Objref_Traits<UnionTest::RestrictionContainer>,
            TAO::Any_Insert_Policy_Stream <UnionTest::RestrictionContainer_ptr>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for UnionTest::CommentRestriction.

UnionTest::CommentRestriction_ptr
TAO::Objref_Traits<UnionTest::CommentRestriction>::duplicate (
    UnionTest::CommentRestriction_ptr p)
{
  return UnionTest::CommentRestriction::_duplicate (p);
}

void
TAO::Objref_Traits<UnionTest::CommentRestriction>::release (
    UnionTest::CommentRestriction_ptr p)
{
  ::CORBA::release (p);
}

UnionTest::CommentRestriction_ptr
TAO::Objref_Traits<UnionTest::CommentRestriction>::nil (void)
{
  return UnionTest::CommentRestriction::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UnionTest::CommentRestriction>::marshal (
    const UnionTest::CommentRestriction_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*UnionTest__TAO_CommentRestriction_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

char * UnionTest::CommentRestriction::message (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CommentRestriction_Proxy_Broker_ == 0)
    {
      UnionTest_CommentRestriction_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Char *>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_message",
      12,
      this->the_TAO_CommentRestriction_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

UnionTest::CommentRestriction::CommentRestriction (void)
 : the_TAO_CommentRestriction_Proxy_Broker_ (0)
{
  this->UnionTest_CommentRestriction_setup_collocation ();
}

void
UnionTest::CommentRestriction::UnionTest_CommentRestriction_setup_collocation ()
{
  if (::UnionTest__TAO_CommentRestriction_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_CommentRestriction_Proxy_Broker_ =
        ::UnionTest__TAO_CommentRestriction_Proxy_Broker_Factory_function_pointer (this);
    }
}

UnionTest::CommentRestriction::~CommentRestriction (void)
{}

void 
UnionTest::CommentRestriction::_tao_any_destructor (void *_tao_void_pointer)
{
  CommentRestriction *_tao_tmp_pointer =
    static_cast<CommentRestriction *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

UnionTest::CommentRestriction_ptr
UnionTest::CommentRestriction::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CommentRestriction>::narrow (
        _tao_objref,
        "IDL:UnionTest/CommentRestriction:1.0",
        UnionTest__TAO_CommentRestriction_Proxy_Broker_Factory_function_pointer
      );
}

UnionTest::CommentRestriction_ptr
UnionTest::CommentRestriction::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CommentRestriction>::unchecked_narrow (
        _tao_objref,
        "IDL:UnionTest/CommentRestriction:1.0",
        UnionTest__TAO_CommentRestriction_Proxy_Broker_Factory_function_pointer
      );
}

UnionTest::CommentRestriction_ptr
UnionTest::CommentRestriction::_duplicate (CommentRestriction_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
UnionTest::CommentRestriction::_tao_release (CommentRestriction_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UnionTest::CommentRestriction::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:UnionTest/CommentRestriction:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* UnionTest::CommentRestriction::_interface_repository_id (void) const
{
  return "IDL:UnionTest/CommentRestriction:1.0";
}

::CORBA::Boolean
UnionTest::CommentRestriction::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_UnionTest_CommentRestriction (
    ::CORBA::tk_objref,
    "IDL:UnionTest/CommentRestriction:1.0",
    "CommentRestriction");
  
namespace UnionTest
{
  ::CORBA::TypeCode_ptr const _tc_CommentRestriction =
    &_tao_tc_UnionTest_CommentRestriction;
}



// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:91

UnionTest::Restriction::Restriction (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = 1;
}

UnionTest::Restriction::Restriction (const ::UnionTest::Restriction &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case '\x0':
    {
      if (u.u_.comment_ == 0)
        {
          this->u_.comment_ = 0;
        }
      else
        {
          typedef UnionTest::CommentRestriction_var OBJECT_FIELD;
          ACE_NEW (
              this->u_.comment_,
              OBJECT_FIELD (
                  UnionTest::CommentRestriction::_duplicate (
                      u.u_.comment_->in ()
                    )
                )
            );
        }
    }
    break;
    default:
    break;
  }
}

UnionTest::Restriction::~Restriction (void)
{
  // Finalize.
  this->_reset ();
}

void UnionTest::Restriction::_tao_any_destructor (void *_tao_void_pointer)
{
  Restriction *tmp =
    static_cast<Restriction *> (_tao_void_pointer);
  delete tmp;
}

UnionTest::Restriction &
UnionTest::Restriction::operator= (const ::UnionTest::Restriction &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;
  
  switch (this->disc_)
  {
    case '\x0':
    {
      if (u.u_.comment_ == 0)
        {
          this->u_.comment_ = 0;
        }
      else
        {
          typedef UnionTest::CommentRestriction_var OBJECT_FIELD;
          ACE_NEW_RETURN (
              this->u_.comment_,
              OBJECT_FIELD (
                  UnionTest::CommentRestriction::_duplicate (
                      u.u_.comment_->in ()
                    )
                ),
              *this
            );
        }
    }
    break;
    default:
    break;
  }
  
  return *this;
}

/// Reset method to reset old values of a union.
void UnionTest::Restriction::_reset (void)
{
  switch (this->disc_)
  {
    
    case '\x0':
      delete this->u_.comment_;
      this->u_.comment_ = 0;
      break;
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/union_typecode.cpp:60

static TAO::TypeCode::Case_T<CORBA::Char, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_UnionTest_Restriction__0 ('\x0', "comment", &UnionTest::_tc_CommentRestriction);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_UnionTest_Restriction[] =
  {
    &_tao_cases_UnionTest_Restriction__0
    
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_UnionTest_Restriction (
    "IDL:UnionTest/Restriction:1.0",
    "Restriction",
    &CORBA::_tc_char,
    _tao_cases_UnionTest_Restriction,
    1, -1);
  
namespace UnionTest
{
  ::CORBA::TypeCode_ptr const _tc_Restriction =
    &_tao_tc_UnionTest_Restriction;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for UnionTest::RestrictionContainer.

UnionTest::RestrictionContainer_ptr
TAO::Objref_Traits<UnionTest::RestrictionContainer>::duplicate (
    UnionTest::RestrictionContainer_ptr p)
{
  return UnionTest::RestrictionContainer::_duplicate (p);
}

void
TAO::Objref_Traits<UnionTest::RestrictionContainer>::release (
    UnionTest::RestrictionContainer_ptr p)
{
  ::CORBA::release (p);
}

UnionTest::RestrictionContainer_ptr
TAO::Objref_Traits<UnionTest::RestrictionContainer>::nil (void)
{
  return UnionTest::RestrictionContainer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UnionTest::RestrictionContainer>::marshal (
    const UnionTest::RestrictionContainer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*UnionTest__TAO_RestrictionContainer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

::UnionTest::Restriction * UnionTest::RestrictionContainer::content (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_RestrictionContainer_Proxy_Broker_ == 0)
    {
      UnionTest_RestrictionContainer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::UnionTest::Restriction>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_content",
      12,
      this->the_TAO_RestrictionContainer_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

UnionTest::RestrictionContainer::RestrictionContainer (void)
 : the_TAO_RestrictionContainer_Proxy_Broker_ (0)
{
  this->UnionTest_RestrictionContainer_setup_collocation ();
}

void
UnionTest::RestrictionContainer::UnionTest_RestrictionContainer_setup_collocation ()
{
  if (::UnionTest__TAO_RestrictionContainer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_RestrictionContainer_Proxy_Broker_ =
        ::UnionTest__TAO_RestrictionContainer_Proxy_Broker_Factory_function_pointer (this);
    }
}

UnionTest::RestrictionContainer::~RestrictionContainer (void)
{}

void 
UnionTest::RestrictionContainer::_tao_any_destructor (void *_tao_void_pointer)
{
  RestrictionContainer *_tao_tmp_pointer =
    static_cast<RestrictionContainer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

UnionTest::RestrictionContainer_ptr
UnionTest::RestrictionContainer::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<RestrictionContainer>::narrow (
        _tao_objref,
        "IDL:UnionTest/RestrictionContainer:1.0",
        UnionTest__TAO_RestrictionContainer_Proxy_Broker_Factory_function_pointer
      );
}

UnionTest::RestrictionContainer_ptr
UnionTest::RestrictionContainer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<RestrictionContainer>::unchecked_narrow (
        _tao_objref,
        "IDL:UnionTest/RestrictionContainer:1.0",
        UnionTest__TAO_RestrictionContainer_Proxy_Broker_Factory_function_pointer
      );
}

UnionTest::RestrictionContainer_ptr
UnionTest::RestrictionContainer::_duplicate (RestrictionContainer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
UnionTest::RestrictionContainer::_tao_release (RestrictionContainer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UnionTest::RestrictionContainer::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:UnionTest/RestrictionContainer:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* UnionTest::RestrictionContainer::_interface_repository_id (void) const
{
  return "IDL:UnionTest/RestrictionContainer:1.0";
}

::CORBA::Boolean
UnionTest::RestrictionContainer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_UnionTest_RestrictionContainer (
    ::CORBA::tk_objref,
    "IDL:UnionTest/RestrictionContainer:1.0",
    "RestrictionContainer");
  
namespace UnionTest
{
  ::CORBA::TypeCode_ptr const _tc_RestrictionContainer =
    &_tao_tc_UnionTest_RestrictionContainer;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for UnionTest::TestServer.

UnionTest::TestServer_ptr
TAO::Objref_Traits<UnionTest::TestServer>::duplicate (
    UnionTest::TestServer_ptr p)
{
  return UnionTest::TestServer::_duplicate (p);
}

void
TAO::Objref_Traits<UnionTest::TestServer>::release (
    UnionTest::TestServer_ptr p)
{
  ::CORBA::release (p);
}

UnionTest::TestServer_ptr
TAO::Objref_Traits<UnionTest::TestServer>::nil (void)
{
  return UnionTest::TestServer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<UnionTest::TestServer>::marshal (
    const UnionTest::TestServer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*UnionTest__TAO_TestServer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void UnionTest::TestServer::Restrict (
    ::UnionTest::RestrictionContainer_ptr restriction)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TestServer_Proxy_Broker_ == 0)
    {
      UnionTest_TestServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::UnionTest::RestrictionContainer>::in_arg_val _tao_restriction (restriction);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_restriction
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "Restrict",
      8,
      this->the_TAO_TestServer_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void UnionTest::TestServer::shutdown (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_TestServer_Proxy_Broker_ == 0)
    {
      UnionTest_TestServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      this->the_TAO_TestServer_Proxy_Broker_,
      TAO::TAO_ONEWAY_INVOCATION
    );
  
  _tao_call.invoke (0, 0);
}

UnionTest::TestServer::TestServer (void)
 : the_TAO_TestServer_Proxy_Broker_ (0)
{
  this->UnionTest_TestServer_setup_collocation ();
}

void
UnionTest::TestServer::UnionTest_TestServer_setup_collocation ()
{
  if (::UnionTest__TAO_TestServer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_TestServer_Proxy_Broker_ =
        ::UnionTest__TAO_TestServer_Proxy_Broker_Factory_function_pointer (this);
    }
}

UnionTest::TestServer::~TestServer (void)
{}

void 
UnionTest::TestServer::_tao_any_destructor (void *_tao_void_pointer)
{
  TestServer *_tao_tmp_pointer =
    static_cast<TestServer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

UnionTest::TestServer_ptr
UnionTest::TestServer::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<TestServer>::narrow (
        _tao_objref,
        "IDL:UnionTest/TestServer:1.0",
        UnionTest__TAO_TestServer_Proxy_Broker_Factory_function_pointer
      );
}

UnionTest::TestServer_ptr
UnionTest::TestServer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<TestServer>::unchecked_narrow (
        _tao_objref,
        "IDL:UnionTest/TestServer:1.0",
        UnionTest__TAO_TestServer_Proxy_Broker_Factory_function_pointer
      );
}

UnionTest::TestServer_ptr
UnionTest::TestServer::_duplicate (TestServer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
UnionTest::TestServer::_tao_release (TestServer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
UnionTest::TestServer::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:UnionTest/TestServer:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* UnionTest::TestServer::_interface_repository_id (void) const
{
  return "IDL:UnionTest/TestServer:1.0";
}

::CORBA::Boolean
UnionTest::TestServer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_UnionTest_TestServer (
    ::CORBA::tk_objref,
    "IDL:UnionTest/TestServer:1.0",
    "TestServer");
  
namespace UnionTest
{
  ::CORBA::TypeCode_ptr const _tc_TestServer =
    &_tao_tc_UnionTest_TestServer;
}



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<UnionTest::CommentRestriction>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace UnionTest
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CommentRestriction_ptr _tao_elem)
  {
    CommentRestriction_ptr _tao_objptr =
      CommentRestriction::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      CommentRestriction_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<CommentRestriction>::insert (
        _tao_any,
        CommentRestriction::_tao_any_destructor,
        _tc_CommentRestriction,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      CommentRestriction_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<CommentRestriction>::extract (
          _tao_any,
          CommentRestriction::_tao_any_destructor,
          _tc_CommentRestriction,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    UnionTest::CommentRestriction_ptr _tao_elem)
{
  UnionTest::CommentRestriction_ptr _tao_objptr =
    UnionTest::CommentRestriction::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    UnionTest::CommentRestriction_ptr *_tao_elem)
{
  TAO::Any_Impl_T<UnionTest::CommentRestriction>::insert (
      _tao_any,
      UnionTest::CommentRestriction::_tao_any_destructor,
      UnionTest::_tc_CommentRestriction,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    UnionTest::CommentRestriction_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<UnionTest::CommentRestriction>::extract (
        _tao_any,
        UnionTest::CommentRestriction::_tao_any_destructor,
        UnionTest::_tc_CommentRestriction,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// be/be_visitor_union/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const UnionTest::Restriction &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<UnionTest::Restriction *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<UnionTest::Restriction>::insert_copy (
        _tao_any,
        UnionTest::Restriction::_tao_any_destructor,
        UnionTest::_tc_Restriction,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    UnionTest::Restriction *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<UnionTest::Restriction>::insert (
      _tao_any,
      UnionTest::Restriction::_tao_any_destructor,
      UnionTest::_tc_Restriction,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    UnionTest::Restriction *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const UnionTest::Restriction *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const UnionTest::Restriction *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<UnionTest::Restriction>::extract (
        _tao_any,
        UnionTest::Restriction::_tao_any_destructor,
        UnionTest::_tc_Restriction,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<UnionTest::RestrictionContainer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace UnionTest
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      RestrictionContainer_ptr _tao_elem)
  {
    RestrictionContainer_ptr _tao_objptr =
      RestrictionContainer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      RestrictionContainer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<RestrictionContainer>::insert (
        _tao_any,
        RestrictionContainer::_tao_any_destructor,
        _tc_RestrictionContainer,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      RestrictionContainer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<RestrictionContainer>::extract (
          _tao_any,
          RestrictionContainer::_tao_any_destructor,
          _tc_RestrictionContainer,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    UnionTest::RestrictionContainer_ptr _tao_elem)
{
  UnionTest::RestrictionContainer_ptr _tao_objptr =
    UnionTest::RestrictionContainer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    UnionTest::RestrictionContainer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<UnionTest::RestrictionContainer>::insert (
      _tao_any,
      UnionTest::RestrictionContainer::_tao_any_destructor,
      UnionTest::_tc_RestrictionContainer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    UnionTest::RestrictionContainer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<UnionTest::RestrictionContainer>::extract (
        _tao_any,
        UnionTest::RestrictionContainer::_tao_any_destructor,
        UnionTest::_tc_RestrictionContainer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<UnionTest::TestServer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace UnionTest
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TestServer_ptr _tao_elem)
  {
    TestServer_ptr _tao_objptr =
      TestServer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      TestServer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<TestServer>::insert (
        _tao_any,
        TestServer::_tao_any_destructor,
        _tc_TestServer,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      TestServer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<TestServer>::extract (
          _tao_any,
          TestServer::_tao_any_destructor,
          _tc_TestServer,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    UnionTest::TestServer_ptr _tao_elem)
{
  UnionTest::TestServer_ptr _tao_objptr =
    UnionTest::TestServer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    UnionTest::TestServer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<UnionTest::TestServer>::insert (
      _tao_any,
      UnionTest::TestServer::_tao_any_destructor,
      UnionTest::_tc_TestServer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    UnionTest::TestServer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<UnionTest::TestServer>::extract (
        _tao_any,
        UnionTest::TestServer::_tao_any_destructor,
        UnionTest::_tc_TestServer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UnionTest::CommentRestriction_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UnionTest::CommentRestriction_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::UnionTest::CommentRestriction RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        UnionTest__TAO_CommentRestriction_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:67


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UnionTest::Restriction &_tao_union
  )
{
  ::ACE_OutputCDR::from_char tmp (_tao_union._d ());
  if ( !(strm << tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;
  
  switch (_tao_union._d ())
  {
    case '\x0':
      {
        result =
          TAO::Objref_Traits<UnionTest::CommentRestriction>::marshal (
              _tao_union.comment (),
              strm
            );
      }
      break;
    default:
      break;
  }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UnionTest::Restriction &_tao_union
  )
{
  CORBA::Char _tao_discriminant;
  ::ACE_InputCDR::to_char tmp (_tao_discriminant);
  if ( !(strm >> tmp) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;
  
  switch (_tao_discriminant)
  {
    case '\x0':
      {
        UnionTest::CommentRestriction_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.inout ();
        
        if (result)
          {
            _tao_union.comment (_tao_union_tmp.in ());
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._d (_tao_discriminant);
      break;
  }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UnionTest::RestrictionContainer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UnionTest::RestrictionContainer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::UnionTest::RestrictionContainer RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        UnionTest__TAO_RestrictionContainer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const UnionTest::TestServer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    UnionTest::TestServer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::UnionTest::TestServer RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        UnionTest__TAO_TestServer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



